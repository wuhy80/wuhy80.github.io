import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e,a as p,f as t}from"./app.2a2b08b1.js";const o={},c=p("p",null,"C++\u5934\u6587\u4EF6\u53EF\u5305\u542B\u5185\u5BB9",-1),i=t(`<h1 id="_2022-10-16-\u5934\u6587\u4EF6\u53EF\u5305\u542B\u5185\u5BB9" tabindex="-1"><a class="header-anchor" href="#_2022-10-16-\u5934\u6587\u4EF6\u53EF\u5305\u542B\u5185\u5BB9" aria-hidden="true">#</a> 2022-10-16 \u5934\u6587\u4EF6\u53EF\u5305\u542B\u5185\u5BB9</h1><p>\u5934\u6587\u4EF6\u4E2D\u53EF\u4EE5\u5305\u542B\u7684\u5185\u5BB9</p><ul><li>\u7C7B</li><li>\u7ED3\u6784\u4F53</li><li>\u8054\u5408\u4F53</li><li>\u5185\u8054\u51FD\u6570</li></ul><p>\u9664\u6B64\u4E4B\u5916\u7684\u5176\u4ED6\u5185\u5BB9\u4E0D\u5E94\u8BE5\u5305\u542B\uFF0C\u793A\u4F8B\u5982\u4E0B\u201C\u6765\u81EA\u4E8E\u5927\u89C4\u6A21C++\u8BBE\u8BA1\u4E00\u4E66\u7B2C\u4E00\u90E8\u5206\u7B2C\u4E8C\u7AE0 \u5934\u6587\u4EF6\u4E2D\u7684\u540D\u5B57\u201D</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// driver.h // fine: \u6CE8\u91CA</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">INCLUDE_DRIVER  </span><span class="token comment">// fine: include guard</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_DRIVER</span>  <span class="token comment">// fine\uFF1A</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">INCLUDED_NIFTY  </span><span class="token comment">// find: redundant include guard</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;nifty.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415926</span>  </span><span class="token comment">// AVOID: macro function</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MIN</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// AVOID: macro function</span></span>

<span class="token keyword">class</span> <span class="token class-name">ostream</span><span class="token punctuation">;</span>  <span class="token comment">// fine: class declaration</span>
<span class="token keyword">class</span> <span class="token class-name">DriverInit</span> <span class="token comment">// fine: class declaration</span>
<span class="token keyword">union</span> Uaw<span class="token punctuation">;</span>  <span class="token comment">// fine: class declaration</span>

<span class="token keyword">extern</span> <span class="token keyword">int</span> globalVariable<span class="token punctuation">;</span>  <span class="token comment">// AVOID: external data declaration</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> fileScopeVariable<span class="token punctuation">;</span> <span class="token comment">// AVOID: internal data definition</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> BUFFER_SIZE <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>  <span class="token comment">// AVOID: const data definition</span>
<span class="token keyword">enum</span> <span class="token class-name">Boolean</span> <span class="token punctuation">{</span> ZERO<span class="token punctuation">,</span> ONE <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// AVOID: enumeration at file scope</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> BigInt<span class="token punctuation">;</span>  <span class="token comment">// AVOID: typedef at file scope</span>

<span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>
  <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// fine: enumeration in class scope</span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>Driver<span class="token double-colon punctuation">::</span><span class="token operator">*</span>PMF<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fine: typedef in class scope</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> s_count<span class="token punctuation">;</span> <span class="token comment">// fine: static member declaration</span>
  <span class="token keyword">int</span> d_size<span class="token punctuation">;</span> <span class="token comment">// fine: member data definition</span>

<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">struct</span> <span class="token class-name">Pnt</span> <span class="token punctuation">{</span>
    <span class="token keyword">short</span> <span class="token keyword">int</span> d_x<span class="token punctuation">,</span> d_y<span class="token punctuation">;</span>
    <span class="token function">Pnt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">d_x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d_y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// fine: private struct definition</span>
    <span class="token keyword">friend</span> DriverInit<span class="token punctuation">;</span>  <span class="token comment">// fine: friend declaration</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">int</span> <span class="token keyword">static</span> round<span class="token punctuation">;</span> <span class="token comment">// fine: static member function declaration</span>
  <span class="token keyword">void</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fine: member function declaration</span>
  <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> Driver<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// fine: const member function declaration</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// fine: class definition</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DriverInit</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> driverInit<span class="token punctuation">;</span>  <span class="token comment">// special case(Section 7.8.1.3)</span>

<span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// AVOID: free function declaration</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// AVOID: free inline function definition</span>

<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">Driver</span><span class="token double-colon punctuation">::</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  d_size <span class="token operator">=</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// fine: inline member function definition</span>

ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> o<span class="token punctuation">,</span> <span class="token keyword">const</span> Driver<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fine: free operator function declaration</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Driver<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Driver<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// fine: free inline operator function definition</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token class-name">Driver</span><span class="token double-colon punctuation">::</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> d <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">-</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span> <span class="token comment">// fine: inline static member function definition</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// fine: end of internal include guard</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function l(r,k){return s(),a("div",null,[c,e(" more "),i])}const m=n(o,[["render",l],["__file","20221016.html.vue"]]);export{m as default};
