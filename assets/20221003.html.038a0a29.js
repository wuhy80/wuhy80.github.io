import{_ as t,a as p,b as e,c as o}from"./clang-format.51c7010f.js";import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as i,e as r,a as n,b as u,d as s,f as k,r as d}from"./app.12c2e8cd.js";const m={},v=n("p",null,"\u4F7F\u7528 CLangD \u914D\u7F6E VSCode \u5F00\u53D1 C++\u4EE3\u7801",-1),h=n("h1",{id:"_2022-10-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2022-10-3","aria-hidden":"true"},"#"),s(" 2022-10-3")],-1),_=s("\u5173\u4E8E Clang-Format \u7684"),b={href:"https://clang.llvm.org/docs/ClangFormatStyleOptions.html",target:"_blank",rel:"noopener noreferrer"},g=s("\u914D\u7F6E\u9009\u9879"),f=s("\uFF0C\u8BF4\u660E\u4E86\u5982\u4F55\u4FEE\u6539\u914D\u7F6E\u6587\u4EF6\u4EE5\u53CA\u5982\u4F55\u8FDB\u884C\u914D\u7F6E"),y=k('<p><img src="'+t+'" alt="clang-extension" loading="lazy"></p><p>\u6709\u9519\u8BEF\u63D0\u793A\u529F\u80FD</p><p><img src="'+p+'" alt="error_hint.png" loading="lazy"></p><p>\u6709\u5F88\u597D\u7528\u7684\u81EA\u52A8\u8865\u9F50\u529F\u80FD\uFF0C\u6BD4\u8D77\u9ED8\u8BA4\u7684 C/C++\u63D2\u4EF6\u81EA\u52A8\u8865\u9F50\u597D\u7528\u592A\u591A</p><p><img src="'+e+'" alt="auto_complete.png" loading="lazy"></p><p>\u683C\u5F0F\u5316\u529F\u80FD\u7684\u914D\u7F6E\uFF0C\u5141\u8BB8\u6307\u5B9A\u6309\u7167\u4E0D\u540C\u7EC4\u7EC7\u63A8\u8350\u7684\u683C\u5F0F\u5316\u6837\u5F0F\u8FDB\u884C\u914D\u7F6E\u3002\u4F8B\u5982\u4E0B\u9762\u662F\u6309\u7167 Google \u7684\u6837\u5F0F\u8FDB\u884C\u914D\u7F6E</p><p><img src="'+o+`" alt="clang-format.png" loading="lazy"></p><h2 id="leetcode-\u63A5\u96E8\u6C34-\u9898\u76EE-42" tabindex="-1"><a class="header-anchor" href="#leetcode-\u63A5\u96E8\u6C34-\u9898\u76EE-42" aria-hidden="true">#</a> LEETCODE \u63A5\u96E8\u6C34 \u9898\u76EE 42</h2><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// @lc code=start</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> l_max <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r_max <span class="token operator">=</span> height<span class="token punctuation">[</span>height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      l_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>l_max<span class="token punctuation">,</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      r_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>r_max<span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>l_max <span class="token operator">&lt;</span> r_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">+=</span> l_max <span class="token operator">-</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        ans <span class="token operator">+=</span> r_max <span class="token operator">-</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function x(w,C){const a=d("ExternalLinkIcon");return l(),i("div",null,[v,r(" more "),h,n("p",null,[_,n("a",b,[g,u(a)]),f]),y])}const N=c(m,[["render",x],["__file","20221003.html.vue"]]);export{N as default};
