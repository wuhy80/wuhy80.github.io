import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t,a as p,f as o}from"./app.c9b96a50.js";const e={},c=p("p",null,"C++\u5E76\u53D1 - \u7EDF\u8BA1\u548C\u529F\u80FD\u7684\u5E76\u53D1\u5904\u7406",-1),l=o(`<h1 id="_2022-10-08-threads" tabindex="-1"><a class="header-anchor" href="#_2022-10-08-threads" aria-hidden="true">#</a> 2022-10-08 Threads</h1><p>\u5982\u4F55\u505A\u5230\u6839\u636E\u8981\u5206\u6790\u7684\u6570\u636E\u81EA\u52A8\u62C6\u5206\u505A\u5904\u7406\uFF0C\u8FD9\u91CC\u9762\u7684\u4F8B\u5B50\u5B9E\u9645\u4E0A\u5E76\u6CA1\u6709\u591A\u5C11\u5E45\u5EA6\u7684\u63D0\u5347\u6548\u7387\uFF0C\u4E5F\u5C31\u662F\u8BF4\u5BF9\u4E8E\u662F\u4E0D\u662F\u8981\u4F7F\u7528\u5E76\u53D1\uFF0C\u9700\u8981\u8003\u8651\u5B9E\u9645\u7684\u4F7F\u7528\u573A\u666F</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex&gt;</span></span>

std<span class="token double-colon punctuation">::</span>mutex mtx<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">accumulate_block</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Iterator first<span class="token punctuation">,</span> Iterator last<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> first<span class="token punctuation">;</span> it <span class="token operator">!=</span> last<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> diff <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;thread:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; result: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>result <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; range: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>last <span class="token operator">&lt;&lt;</span>
        <span class="token string">&quot; times:&quot;</span> <span class="token operator">&lt;&lt;</span> diff<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T <span class="token function">parallel_accumulate</span><span class="token punctuation">(</span>Iterator first<span class="token punctuation">,</span> Iterator last<span class="token punctuation">,</span> T init<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> length <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> init<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> min_per_thread <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> max_threads <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> min_per_thread <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> min_per_thread<span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> hardware_threads <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> num_threads <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>hardware_threads <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> hardware_threads <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> max_threads<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">const</span> block_size <span class="token operator">=</span> length <span class="token operator">/</span> num_threads<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">results</span><span class="token punctuation">(</span>num_threads<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&gt;</span> <span class="token function">threads</span><span class="token punctuation">(</span>num_threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num threads:&quot;</span> <span class="token operator">&lt;&lt;</span> num_threads <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    Iterator block_start <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>num_threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Iterator block_end <span class="token operator">=</span> block_start<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">advance</span><span class="token punctuation">(</span>block_end<span class="token punctuation">,</span> block_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">accumulate_block</span><span class="token generic class-name"><span class="token operator">&lt;</span>Iterator<span class="token punctuation">,</span> T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                block_start<span class="token punctuation">,</span> block_end<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        block_start <span class="token operator">=</span> block_end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token generic-function"><span class="token function">accumulate_block</span><span class="token generic class-name"><span class="token operator">&lt;</span>Iterator<span class="token punctuation">,</span> T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_start<span class="token punctuation">,</span> last<span class="token punctuation">,</span> results<span class="token punctuation">[</span>num_threads<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> entry<span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        entry<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> results<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        init <span class="token operator">+=</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> init<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6548\u679C\u4E0D\u5927</span>
<span class="token comment">// multi thread accumulated result: 3051657985 tot time: 8.61885s</span>
<span class="token comment">// single thread accumulated result: 3051657984 tot time: 10.0691s</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;max_concurrency:&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span><span class="token function">hardware_concurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    background_task f<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread_guard <span class="token function">g</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> inc_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span> it <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        it <span class="token operator">=</span> inc_num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> tot <span class="token operator">=</span> <span class="token function">parallel_accumulate</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> diff <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;multi thread accumulated result: &quot;</span> <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span>  <span class="token string">&quot; tot time: &quot;</span> <span class="token operator">&lt;&lt;</span> diff<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tot <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    diff <span class="token operator">=</span> end<span class="token operator">-</span>start<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;single thread accumulated result: &quot;</span> <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span>  <span class="token string">&quot; tot time: &quot;</span> <span class="token operator">&lt;&lt;</span> diff<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6267\u884C\u7ED3\u679C\u5982\u4E0B\u3002\u5BF9\u4E8E\u8FD0\u884C\u7ED3\u679C\u6709\u4E00\u4E2A\u4E0D\u592A\u7406\u89E3\u7684\u5C31\u662F\u62C6\u5206\u6210\u4E3A 12 \u5206\u4E4B\u540E\u6BCF\u4EFD\u6BD4\u6CA1\u6709\u62C6\u5206\u7684\u4E5F\u5C31\u7F29\u77ED\u4E86 2s\uFF0C\u5E45\u5EA6\u975E\u5E38\u5C0F\uFF0C\u4E0D\u77E5\u9053\u5E95\u5C42\u662F\u6709\u4EC0\u4E48\u4F18\u5316\u63AA\u65BD\u5728</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CLionProjects\\cpp_17\\cmake-build-debug\\cpp_17.exe

num threads:12
thread:11 result: 257012011range: 666666664-749999997 times:6.80243
thread:1 result: 2227039391range: 916666663-0 times:6.94445
thread:12 result: 3225042178range: 749999997-833333330 times:6.95752
thread:13 result: 4021008087range: 833333330-916666663 times:6.95888
thread:5 result: 4054065089range: 166666666-249999999 times:8.45029
thread:6 result: 555063702range: 249999999-333333332 times:8.54545
thread:8 result: 2146995521range: 416666665-499999998 times:8.56105
thread:10 result: 3738927340range: 583333331-666666664 times:8.69256
thread:7 result: 1351029612range: 333333332-416666665 times:8.70202
thread:9 result: 2942961431range: 499999998-583333331 times:8.74683
thread:4 result: 3258099179range: 83333333-166666666 times:8.77624
thread:3 result: 2462133270range: 0-83333333 times:8.7788
multi thread accumulated result: 174605740 tot time: 8.78106s
single thread accumulated result: 174605739 tot time: 10.2169s

Process finished with exit code 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function u(i,r){return s(),a("div",null,[c,t(" more "),l])}const v=n(e,[["render",u],["__file","20221008.html.vue"]]);export{v as default};
