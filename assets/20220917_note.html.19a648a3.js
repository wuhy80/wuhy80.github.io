import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t,a as p,f as e}from"./app.d0122b6c.js";const o={},c=p("p",null,"\u5B66\u4E60 LevelDB \u7684\u7B2C\u4E8C\u5929\uFF0C\u8BB0\u5F55\u4E00\u4E9B\u7591\u60D1\uFF0C\u4EE3\u7801\u770B\u8D77\u6765\u5F88\u96BE\u61C2\u554A",-1),l=e(`<h1 id="skiplist-\u7684\u521D\u59CB\u5316\u52A8\u4F5C" tabindex="-1"><a class="header-anchor" href="#skiplist-\u7684\u521D\u59CB\u5316\u52A8\u4F5C" aria-hidden="true">#</a> SkipList \u7684\u521D\u59CB\u5316\u52A8\u4F5C</h1><p>\u6709\u51E0\u4E2A\u7591\u70B9</p><ol><li>NewNode \u91CC\u9762\u4F7F\u7528\u7684 arena \u505A\u7684\u5185\u5B58\u5206\u914D\uFF0C\u6CA1\u770B\u592A\u61C2</li><li>\u4E3A\u5565 next_\u9700\u8981\u4F7F\u7528 atomic \u64CD\u4F5C\uFF1F\u5176\u4ED6\u7684\u5C31\u4E0D\u9700\u8981\u4E86\u5417\uFF1F\u4EC0\u4E48\u65F6\u5019\u4F7F\u7528 atomic \u64CD\u4F5C\u4EC0\u4E48\u65F6\u5019\u4E0D\u9700\u8981</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">&gt;</span>
<span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Comparator<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">SkipList</span><span class="token punctuation">(</span>Comparator cmp<span class="token punctuation">,</span> Arena<span class="token operator">*</span> arena<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">compare_</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">arena_</span><span class="token punctuation">(</span>arena<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">head_</span><span class="token punctuation">(</span><span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token comment">/* any key will do */</span><span class="token punctuation">,</span> kMaxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">max_height_</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">rnd_</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> kMaxHeight<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head_<span class="token operator">-&gt;</span><span class="token function">SetNext</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SetNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> Node<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Use a &#39;release store&#39; so that anybody who reads through this</span>
  <span class="token comment">// pointer observes a fully initialized version of the inserted node.</span>
  next_<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function i(u,r){return s(),a("div",null,[c,t(" more "),l])}const m=n(o,[["render",i],["__file","20220917_note.html.vue"]]);export{m as default};
